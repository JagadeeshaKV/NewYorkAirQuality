tc <- trainControl(method="cv", number=4)
gbModel <- train(classe ~ ., method = "gbm", data = training, tuneLength = 5,
metric = "Accuracy", trControl = tc, verbose= FALSE )
gbModel <- train(classe ~ ., method = "gbm", data = training, tuneLength = 5,
trControl = tc, verbose= FALSE )
gbModel <- train(classe ~ ., method = "gbm", data = training,
trControl = tc, verbose= FALSE )
set.seed(3644)
#tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
#          summaryFunction = multiClassSummary, classProbs = TRUE)
tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength = 5, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
```
## gradient boosting method
```{r}
gbModel <- train(classe ~ ., method = "gbm", data = training, tuneLength = 5,
trControl = tc, verbose= FALSE )
tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
summaryFunction = multiClassSummary, classProbs = TRUE)
#tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength = 10, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
set.seed(3644)
tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
summaryFunction = multiClassSummary, classProbs = TRUE)
#tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength = 50, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
rfModel <- train(classe~., method="rf", data=training, tuneLength=10,
trControl=tc, verbose=FALSE)
set.seed(3644)
tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
summaryFunction = multiClassSummary, classProbs = TRUE)
#tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength = 10, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
set.seed(3644)
tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
summaryFunction = multiClassSummary, classProbs = TRUE)
#tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength = 20, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
gbModel <- train(classe ~ ., method = "gbm", data = training, tuneLength = 10,
trControl = tc, verbose= FALSE )
gbModel <- train(classe ~ ., method = "gbm", data = training,
trControl = tc, verbose= FALSE )
tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
summaryFunction = multiClassSummary, classProbs = TRUE)
#tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength = 50, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
gbModel <- train(classe ~ ., method = "gbm", data = training,
trControl = tc, verbose= FALSE )
plot(gbModel)
tPredict <- predict(gbModel,newdata=testing)
gbConfMatrix <- confusionMatrix(testing$classe,tPredict)
gbConfMatrix$table
gbConfMatrix$overall[1]
gbModel <- train(classe ~ ., method = "gbm", data = training, tuneLength=10,
trControl = tc, verbose= FALSE )
tc <- trainControl(method="cv", number=5)
dtModel <- rpart(classe ~ .,data = training, trControl=tc)
tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneGrid=data.frame(cp=0.01), trControl = tc)
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
dtConfMatrix$overall[1]
gbModel <- train(classe ~ ., method = "gbm", data = training, tuneGrid=data.frame(cp=0.01),
trControl = tc, verbose= FALSE )
gbModel <- train(classe ~ ., method = "rf", data = training, tuneGrid=data.frame(cp=0.01),
trControl = tc, verbose= FALSE )
tc <- trainControl(method = "repeatedcv", number = 4,repeats = 5,
summaryFunction = multiClassSummary, classProbs = TRUE)
dtModel <- train(classe ~ ., method = "rpart", data = training,  trControl = tc)
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
dtModel <- train(classe ~ ., method = "rpart", data = training,
tuneLength=3, trControl = tc)
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
set.seed(3644)
tc <- trainControl(method="cv", number=5)
dtModel <- train(classe ~ ., method = "rpart", data = training, trControl = tc)
fancyRpartPlot(dtModel$finalModel, main="Prediction with decision trees", sub="")
tPredict <- predict(dtModel,testing)
dtConfMatrix <- confusionMatrix(tPredict,testing$classe)
# display confusion matrix and model accuracy
dtConfMatrix$table
dtConfMatrix$overall[1]
gbModel <- train(classe ~ ., method = "gbm", data = training,
trControl = tc, verbose= FALSE )
plot(gbModel)
tPredict <- predict(gbModel,newdata=testing)
gbConfMatrix <- confusionMatrix(testing$classe,tPredict)
gbConfMatrix$table
gbConfMatrix$overall[1]
100-95.70482
rfModel <- train(classe~., method="rf", data=training, tuneLength=10,
trControl=tc, verbose=FALSE)
rfModel <- train(classe~., method="rf", data=training,
trControl=tc, verbose=FALSE)
plot(rfModel,main="Accuracy of Random forest model by number of predictors")
tPredict <- predict(rfModel,newdata=testing)
rfConfMatrix <- confusionMatrix(testing$classe,tPredict)
rfConfMatrix$table
rfConfMatrix$overall[1]
names(rfModel$finalModel)
rfModel$finalModel$classes
finalTest <- predict(rfModel,newdata=testDataComplete)
finalTest
100-99.24802
set.seed(3344)
rfModel <- train(classe~., method="rf", data=training,
trControl=tc, verbose=FALSE)
plot(rfModel,main="Accuracy of Random forest model by number of predictors")
tPredict <- predict(rfModel,newdata=testing)
rfConfMatrix <- confusionMatrix(tPredict,testing$classe)
rfConfMatrix$table
rfConfMatrix$overall[1]
100-0.9927352
100-99.27352
set.seed(3344)
gbModel <- train(classe ~ ., method = "gbm", data = training,
trControl = tc, verbose= FALSE )
plot(gbModel)
tPredict <- predict(gbModel,newdata=testing)
gbConfMatrix <- confusionMatrix(tPredict,testing$classe)
gbConfMatrix$table
gbConfMatrix$overall[1]
wd <- getwd()
100-0.9574305
100-95.74305
100-99.27352
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
my_map <- my_map %>% addMarkers(lat=39.8, lng=-72.6,  popup = "Hello")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=45.3573, lng=--122.6068,  popup = "Hello")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=45.3573, lng=-122.6068,  popup = "Hello")
my_map
orstationc
data("faithful")
head(faithful)
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=36.056595, lng=-112.125092,  popup = "Grand Canyon")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=43.092461, lng=-79.047150,  popup = "Grand Canyon")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=43.1086597, lng=-79.0612214,  popup = "Niagara Falls")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=40.7485413, lng=-73.9879464,  popup = "Empire State Building")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=40.748817, lng=-73.985428,  popup = "Empire State Building")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat= 40.748441, lng=-73.985664,  popup = "Empire State Building")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat= 40.758896, lng=-73.985130,  popup = "Empire State Building")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat= 51.510357, lng=-0.116773,  popup = "Big Ben")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat= 41.897129, lng=-87.6244153,  popup = "Chicago Water Tower")
my_map
library(leaflet)
pop <- c("<a href= 'https://en.wikipedia.org/wiki/Chicago_Water_Tower' >Chicago Water Tower</a>")
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat= 41.897129, lng=-87.6244153,  popup = pop)
my_map
install.packages("plotly")
packageVersion("plotly")
library(quantmod)
install.packages("quantmod")
library(plotly)
library(quantmod)
getSymbols(Symbols = c("AAPL", "MSFT"))
ds <- data.frame(Date = index(AAPL), AAPL[,6], MSFT[,6])
p <- plot_ly(ds, x = ~Date) %>%
add_lines(y = ~AAPL.Adjusted, name = "Apple") %>%
add_lines(y = ~MSFT.Adjusted, name = "Microsoft") %>%
layout(
title = "Stock Prices",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 yr",
step = "year",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(step = "all"))),
rangeslider = list(type = "date")),
yaxis = list(title = "Price"))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="rangeslider")
chart_link
ds <- data.frame(Date = index(AAPL), AAPL[,6], MSFT[,6])
p <- plot_ly(ds, x = ~Date) %>%
add_lines(y = ~AAPL.Adjusted, name = "Apple") %>%
add_lines(y = ~MSFT.Adjusted, name = "Microsoft") %>%
layout(
title = "Stock Prices",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 mo",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 mo",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 yr",
step = "year",
stepmode = "backward"),
list(
count = 1,
label = "YTD",
step = "year",
stepmode = "todate"),
list(step = "all"))),
rangeslider = list(type = "date")),
yaxis = list(title = "Price"))
p
quantmod
library(quantmod)
?quantmod
?getSymbols
getSymbols(Symbols = c("AAPL", "google"))
View(AAPL)
getSymbols(Symbols = c("AAPL", "yahoo"))
library(quantmod)
getSymbols(Symbols = c("AAPL", "yahoo"))
getSymbols(Symbols = c("AAPL", "YHOO"))
exists("AAPL")
exists("YHOO")
exists("MSFT")
exists("GOOGL")
exists("GOOG")
exists("DIA")
?quantmod
exists("GOGL")
?getSymbols
showSymbols()
getSymbols(Symbols = c("AAPL", "google"))
View(AAPL)
data(oil.price)
getSymbols(Symbols = c("AAPL", "GOOG"))
?line
shiny::runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
lineX <- runif(50,40,100)
lineX < sort(lineX)
lineX <- runif(50,40,100)
lineX
sort(lineX)
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
?runif
runApp('~/NewyorkWeather')
x    <- faithful[, 2]
x
max <- 60
x[which(x<max)]
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
airquality$Month
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
airquality
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
airquality
?airquality
runApp('~/NewyorkWeather')
getwd()
getwd()
shiny::runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
ChickWeight
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
shiny::runApp('~/NewyorkWeather')
shiny::runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
airquality
?seq
airquality
runApp('~/NewyorkWeather')
dataset <- airquality[which(airquality$Month==5)]
which(airquality$Month==5)
runApp('~/NewyorkWeather')
airquality[airquality$Month==sMonth]
airquality[airquality$Month==5]
airquality$Month==5
runApp('~/NewyorkWeather')
airquality
runApp('~/NewyorkWeather')
?openair
sleep
AirPassengers
volcano
women
WWWusage
uspop
USPersonalExpenditure
dataset <- airquality[airquality$Month==5,]
dataset$Day/7
weekdays(23)
?weekdays
dataset$Day
dataset$Day%7
mod(dataset$Day,7)
?mod
dataset$Day%%7
dataset$Day%/%7
seq(2,2,1)
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
shiny::runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
?airquality
pairs(airquality, panel = panel.smooth, main = "airquality data")
runApp('~/NewyorkWeather')
shiny::runApp('~/NewyorkWeather')
?airquality
runApp('~/NewyorkWeather')
sWeeks <- seq(1,3,1)
dataset <- airquality[airquality$Month==6,]
dataset$Week <- (dataset$Day%/%7)+1
dataset$DayOfWeek <- (dataset$Day%%7)+1
dataset <- dataset[dataset$Week %in% sWeeks,]
dataset
sWeeks <- seq(1,3,1)
dataset <- airquality[airquality$Month==sMonth,]
dataset$Week <- (dataset$Day%/%7)+1
dataset$DayOfWeek <- (dataset$Day%%7)
dataset <- dataset[dataset$Week %in% sWeeks,]
dataset <- airquality[airquality$Month==6,]
dataset$Week <- (dataset$Day%/%7)+1
dataset$DayOfWeek <- (dataset$Day%%7)
dataset <- dataset[dataset$Week %in% sWeeks,]
dataset
runApp('~/NewyorkWeather')
sWeeks <- seq(1,3,1)
dataset <- airquality[airquality$Month==6,]
dataset$Week <- (dataset$Day%/%7)+1
dataset$DayOfWeek <- ifelse((dataset$Day%%7)==0,7,(dataset$Day%%7))
dataset <- dataset[dataset$Week %in% sWeeks,]
dataset
runApp('~/NewyorkWeather')
?airquality
?weekdays
sWeeks <- seq(1,3,1)
dataset <- airquality[airquality$Month==6,]
dataset$Week <- ifelse((dataset$Day%%7)==0,(dataset$Day%/%7),(dataset$Day%/%7)+1)
#dataset$DayOfWeek <- ifelse((dataset$Day%%7)==0,7,(dataset$Day%%7))
dataset$Date <- paste0(sMonth,"-",dataset$Day,"-","1973")
dataset$Date <- as.Date(dataset$Date,"%m-%d-%Y")
dataset$DayOfWeek <- weekdays(dataset$Date)
dataset <- dataset[dataset$Week %in% sWeeks,]
sWeeks <- seq(1,3,1)
sMonth <- 5
dataset <- airquality[airquality$Month==sMonth,]
dataset$Week <- ifelse((dataset$Day%%7)==0,(dataset$Day%/%7),(dataset$Day%/%7)+1)
#dataset$DayOfWeek <- ifelse((dataset$Day%%7)==0,7,(dataset$Day%%7))
dataset$Date <- paste0(sMonth,"-",dataset$Day,"-","1973")
dataset$Date <- as.Date(dataset$Date,"%m-%d-%Y")
dataset$DayOfWeek <- weekdays(dataset$Date)
dataset <- dataset[dataset$Week %in% sWeeks,]
dataset
runApp('~/NewyorkWeather')
runApp('~/NewyorkWeather')
shiny::runApp('~/NewyorkWeather')
setwd("~/NewyorkWeather")
runApp("~/NewyorkWeather")
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/NewyorkWeather")
